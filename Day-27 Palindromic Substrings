Palindromic Substrings

Given a string, your task is to count how many palindromic substrings in this string.

The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Example 1:

Input: "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
 

Example 2:

Input: "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
 

Note:

The input string length won't exceed 1000.


Solution:
C++:

class Solution {
public:
    int countSubstrings(string s) {
         int count = 0;
    int size = s.length();
    int low = 0;
    int high = 0;
    
    for(int i=0; i < s.length(); i++)
    {
        low = i-1;
        high = i+1;
        //Compute all odd lengths palindrome
        while( low >= 0 && high < size && s[low] == s[high])
        {
            low--;
            high++;
            count++;
        }
        
        low = i;
        high = i+1;
        //Compute all even length palindrome
        while( low >= 0 && high < size && s[low] == s[high])
        {
            low--;
            high++;
            count++;
        }
    }
	//since individual elements will in itself be palindrome of size 1, so adding size in final result
    return count+size;
    }
};
